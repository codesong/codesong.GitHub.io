<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用MySQL开发程序</title>
    <url>/2020/04/21/%E4%BD%BF%E7%94%A8MySQL%E5%BC%80%E5%8F%91%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<p>Application programs should use this general outline for interacting with MySQL:</p>
<ol>
<li><p>Initialize the MySQL client library by calling mysql_library_init().</p>
</li>
<li><p>Initialize a connection handler by calling mysql_init() and connect to the server by calling<br>mysql_real_connect().</p>
</li>
<li><p>Issue SQL statements and process their results. (The following discussion provides more<br>information about how to do this.)</p>
</li>
<li><p>Close the connection to the MySQL server by calling mysql_close().</p>
</li>
<li><p>End use of the MySQL client library by calling mysql_library_end().</p>
</li>
</ol>
<p>MySQL 8.0 provides support for server-side prepared statements. This support takes advantage of<br>the efficient client/server binary protocol. Using prepared statements with placeholders for parameter<br>values has the following benefits:<br>• Less overhead for parsing the statement each time it is executed. Typically, database applications<br>process large volumes of almost-identical statements, with only changes to literal or variable values<br>in clauses such as WHERE for queries and deletes, SET for updates, and VALUES for inserts.<br>• Protection against SQL injection attacks. The parameter values can contain unescaped SQL quote<br>and delimiter characters.</p>
]]></content>
  </entry>
  <entry>
    <title>C++中使用Lambda表达式</title>
    <url>/2020/04/20/C-%E4%B8%AD%E4%BD%BF%E7%94%A8Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>C++11开始支持Lambda表达式。Lambda是能够捕获范围内变量的匿名函数对象。</p>
<h2 id="Lambda表达式使用场景"><a href="#Lambda表达式使用场景" class="headerlink" title="Lambda表达式使用场景"></a>Lambda表达式使用场景</h2><p>匿名函数做的事情，具名函数照样能做，那么为什么C++还要支持Lambda表达式呢？</p>
<p>依我来看匿名函数最重要的一点就是匿名，没有名字，没有名字就不用去思考如何命名的问题，减少了编码时的心智负担。所以我认为Lambda表达式（匿名函数）在C++中唯一推荐使用的情况是：封装的代码简单， 只使用一次，不会复用，而且不想去思考如何命名。正常情况下，如果不是推荐使用的情况，还不如老老实实封装个函数，这样还能提高代码的可读性，强行使用Lambda表达式不可取。</p>
<p>举一个推荐使用场景的栗子：定制智能指针销毁对象的动作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	Foo()&#123;&#125;	</span><br><span class="line">	~Foo()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Foo&gt; <span class="title">foo</span><span class="params">(<span class="keyword">new</span> Foo, [](Foo* p) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Call delete from lambda...\n"</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">delete</span> p;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lambda表达式语法"><a href="#Lambda表达式语法" class="headerlink" title="Lambda表达式语法"></a>Lambda表达式语法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[captures]&lt;tparams&gt;(optional)(params)specifiers exception attr-&gt;ret &#123;body&#125;  		(<span class="number">1</span>)	</span><br><span class="line">[captures](params)-&gt;ret&#123;body&#125;														(<span class="number">2</span>)	</span><br><span class="line">[captures](params)&#123;body&#125;															(<span class="number">3</span>)	</span><br><span class="line">[captures]&#123;body&#125;																	(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<p>1)  完整声明。<br>2) 带有返回声明。<br>3) 省略返回，返回类型根据返回语句推导。<br>4) 省略参数列表，无参数时使用。</p>
<p>推荐用第三种形式。理由：由于用Lambda封装的代码比较简单，不考虑带模板参数的形式，排除第一种形式（如果要用到第一种形式，那就直接去写个模板函数），第三种形式能完整替代第二种，且形式更加简单，第四种只适合不带参数的情况，第四种可用第三种<code>[ captures ] ( ) { body }</code>代替。故只用第三种足以。</p>
<p><code>captures</code>  捕获列表，参数以逗号分割，可用拷贝或引用形式。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[]  	<span class="comment">// 不捕获外部作用域变量</span></span><br><span class="line">[=] 	<span class="comment">// 以值拷贝形式捕获外部作用域所有变量，如果在类内定义则包含this指针</span></span><br><span class="line">[&amp;] 	<span class="comment">// 以引用形式捕获外部作用域所有变量，如果在类内定义则包含*this</span></span><br><span class="line">[a] 	<span class="comment">// 捕获外部作用域指定变量</span></span><br><span class="line">[a, &amp;b] <span class="comment">// 混用值拷贝和引用</span></span><br><span class="line">[=, &amp;a] <span class="comment">// 以值拷贝形式捕获外部作用域除了a的所有变量，a以引用形式捕获</span></span><br></pre></td></tr></table></figure>

<p><code>params</code>好理解，就是函数参数列表，匿名函数也是函数，比照普通函数，当然有参数列表。</p>
<p><code>body</code> 函数体。</p>
<p>最后，仅举一个最简单的例子用作代码参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">	int a &#x3D; 3;</span><br><span class="line">	int b &#x3D; 4;</span><br><span class="line">	</span><br><span class="line">	std::cout &lt;&lt; [a, b]()&#123; return a + b; &#125;() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ol>
<li>推荐使用场景：封装的代码简单，不需要复用，且不想花精力去思考如何命名函数。除了此场景外，使用普通的函数更好。</li>
<li>推荐使用方式：<code>[ captures ] ( params ) { body }</code>。</li>
</ol>
]]></content>
  </entry>
</search>
